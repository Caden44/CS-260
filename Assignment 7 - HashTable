#include <iostream>
#include <list>
using namespace std;

class HashTable
{
  int total;
  list<int> *box;

public:
  HashTable(int V);
  void InsertItem(int head, int body);
  void DeleteItem(int head);
  
int CheckNum(int n)
  {
      
  int i;
 
  for (i = 2; i < n / 2; i++)
  {
    if (n % i == 0)
    {
      return 0;
    }
  }
  return 1;
  }
  
  int GetNum(int n)
  {
  if (n % 2 == 0)
  {
    n++;
  }
  while (!CheckNum(n))
  {
    n += 2;
  }
  return n;
  }

  int HashFunction(int head)
  {
    return (head % total);
  }
  void DisplayHash();
};

void HashTable::InsertItem(int head, int body)
{
  int index = HashFunction(head);
  box[index].push_back(body);
}

HashTable::HashTable(int x)
{
  int size = GetNum(x);
  this -> total = size;
  box = new list<int>[total];
}

void HashTable::DisplayHash()
{
  for (int i = 1; i < total; i++)
  {
    cout << "Section " << i << ": ";
  for (auto x : box[i])
    cout << x << " -> ";
  cout << "\n";
  }
}

int main()
{
  int head[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5};
  int body[] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 43110};
  int size = sizeof(head) / sizeof(head[0]);

  HashTable h(size);
  for (int i = 0; i < size; i++)
  {
    h.InsertItem(head[i], body[i]);
  }
  h.DisplayHash();
}
